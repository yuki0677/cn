#include <stdio.h>

// Compute the greatest common divisor (GCD)
int gcd(int a, int b) {
    while (b) {
        int t = b;
        b = a % b;
        a = t;
    }
    return a;
}

// Compute modular exponentiation
int modExp(int base, int exp, int mod) {
    int result = 1;
    while (exp) {
        if (exp % 2) result = (result * base) % mod;
        base = (base * base) % mod;
        exp /= 2;
    }
    return result;
}

// Compute modular inverse using Extended Euclidean Algorithm
int modInverse(int e, int phi) {
    int t = 0, newT = 1, r = phi, newR = e;
    while (newR) {
        int q = r / newR;
        int tempT = t;
        t = newT;
        newT = tempT - q * newT;
        int tempR = r;
        r = newR;
        newR = tempR - q * newR;
    }
    return (r > 1) ? -1 : (t < 0 ? t + phi : t);
}

int main() {
    int p, q, n, phi, e, d, plaintext, ciphertext, decryptedtext;

    // Input prime numbers p and q
    printf("Enter prime number p: ");
    scanf("%d", &p);
    printf("Enter prime number q: ");
    scanf("%d", &q);

    n = p * q;
    phi = (p - 1) * (q - 1);

    // Input public exponent e
    printf("Enter value for e (1 < e < %d): ", phi);
    scanf("%d", &e);

    if (gcd(e, phi) != 1) {
        printf("e must be coprime with Ï†\n");
        return 1;
    }

    // Compute private exponent d
    d = modInverse(e, phi);
    if (d == -1) {
        printf("Modular inverse does not exist\n");
        return 1;
    }

    // Input plaintext
    printf("Enter plaintext integer to encrypt (0 < plaintext < %d): ", n);
    scanf("%d", &plaintext);

    // Encrypt and decrypt
    ciphertext = modExp(plaintext, e, n);
    decryptedtext = modExp(ciphertext, d, n);

    // Output results
    printf("Ciphertext: %d\n", ciphertext);
    printf("Decrypted plaintext: %d\n", decryptedtext);

    return 0;
}
